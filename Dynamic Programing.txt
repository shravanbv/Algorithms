def minJumps(arr, n): 
    jumps = [float('inf')] *n 
  
    if (n == 0) or (arr[0] == 0): 
        return float('inf') 
  
    jumps[0] = 0
  
    for i in range(1, n): 
        for j in range(i): 
            if (i <= j + arr[j]): 
                jumps[i] = min(jumps[i], jumps[j] + 1) 
                break
    return jumps[n-1] 
  
arr = [2,3,1,1,4] 
size = len(arr) 
minJumps(arr,size)
********************************************************************************************************

def lcs(X , Y): 
    # find the length of the strings 
    m = len(X) 
    n = len(Y) 
  
    # declaring the array for storing the dp values 
    L = [[None]*(n+1) for i in xrange(m+1)] 
  
    """Following steps build L[m+1][n+1] in bottom up fashion 
    Note: L[i][j] contains length of LCS of X[0..i-1] 
    and Y[0..j-1]"""
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0 : 
                L[i][j] = 0
            elif X[i-1] == Y[j-1]: 
                L[i][j] = L[i-1][j-1]+1
            else: 
                L[i][j] = max(L[i-1][j] , L[i][j-1]) 
  
    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] 
    return L[m][n] 
#end of function lcs 
  
  
# Driver program to test the above function 
X = "AGGTAB"
Y = "GXTXAYB"
print "Length of LCS is ", lcs(X, Y) 
********************************************************************************************************
def lengthOfLIS(self, nums):
	
	lis=[1] * len(nums)
	
	if len(nums)<1:
		return 0
	if len(nums) is None:
		return 0
	for i in range(1,len(nums)):
		for j in range(i):
			if nums[j]<nums[i]:
				lis[i] = max(lis[i],lis[j]+1) 
				
	return max(lis)           
	
	
def lengthOfLIS(nums):
    
    seq=[0] * len(nums)
    lis=[1] * len(nums)
    
    if len(nums)<1:
        return 0
    if len(nums) is None:
        return 0
    for i in range(1,len(nums)):
        for j in range(i):
            if nums[j]<nums[i]:
                lis[i] = max(lis[i],lis[j]+1) 
                
                if lis[j]+1 < lis[i]:
                    continue
                else:  
                    seq[i] = j
    
    temp=[]
    last = len(seq)-1
    temp.append(last)
    while last>0:    
        
        index=seq[last]
        last=index
        
        if nums[last] < nums[temp[-1]]:
            temp.append(last)
			
    for i in temp[::-1]:         
        print(nums[i])
        
                
                
    return max(lis)
    
lengthOfLIS([10, 22, 9, 33, 21, 50, 41, 60] )    
#output= 10,22,33,50,60	
********************************************************************************************************
def coinChange(arr,value): 
    m = len(arr) 
    n = value 
  
    L = [[None]*(n+1) for i in range(m+1)] 
    
    for i in range(m+1):
        for j in range(n+1):
            
            if i==0 and j==0:
                L[i][j] = 1
            elif i == 0 and j != 0 : 
                L[i][j] = 0    
            else:
                if arr[i-1] > j:
                    L[i][j] = L[i-1][j]
                else:
                    L[i][j] = L[i-1][j] + L[i][j-arr[i-1]]
    return L[m][n]                
  
  
coinChange([1, 2, 5],5) 
********************************************************************************************************
https://www.youtube.com/watch?v=NFJ3m9a1oJQ
https://www.youtube.com/watch?v=CFQk7OQO_xM
0(n)
def _climb(n, cache = {}):
            
            #Memoization 
            if n in cache.keys():
                return cache[n]
            
            #Base case for when you're 0,1,2 steps away
            if (n < 3):
                cache[n] =  n 
            else:
                cache[n] = _climb(n-2, cache) + _climb(n-1, cache)
            
            return cache[n]
            
        
        return _climb(n)
		
__fib_cache = {}
def fib(n):
    if n in __fib_cache:
        return __fib_cache[n]
    else:
        if n < 2:
            __fib_cache[n] = n     
        else:
            __fib_cache[n]=fib(n-2) + fib(n-1)
        return __fib_cache[n]
        
fib(5)        
	
0(2^n)	
def climbStairs(n):
    
    if n<=1:
        return 1
        
    ways=[None]*(n+1)
    ways[0]=1
    ways[1]=1
    
    for i in range(2,n+1):
        ways[i] = ways[i-1] + ways[i-2]
        
    return  ways[n]    
    
climbStairs(6)    

def fib(n):
    
    if n<=1:
        return 1
        
    ways2=[None]*(n+1)
    ways2 [0]=0
    ways2 [1]=1
    
    for i in range(2,n+1):
        ways2[i] = ways2[i-1] + ways2[i-2]
        
    return  ways2[n]    
    
fib(6)
********************************************************************************************************
def uniquePaths(m,n):
    dp=[[1]*(m) for i in range(n)]
    
    for i in range(1,n):
        for j in range(1,m):
            dp[i][j] = dp[i-1][j]+dp[i][j-1]
    return dp[-1][-1]        
    
uniquePaths(3,2)    

#number of wayes to reach m*n
def minCost(cost,m,n):
    
    T = [[None]*len(cost[0]) for i in range(len(cost))]
    
    for i in range(len(cost)):
        for j in range(len(cost[0])):
            if i==0 or j==0:
                T[i][j] = cost[i][j]
            else:
                T[i][j] = min(T[i-1][j],T[i][j-1]) + cost[i][j]
                
    return T[m][n]            
      
cost = [[1, 3, 1], 
        [1, 5, 1], 
        [4, 2, 1]] 
print(minCost(cost, 2, 2))  


def minCostPath(cost):
    
    T = [[None]*len(cost[0]) for i in range(len(cost))]
    
    for i in range(len(cost)):
        for j in range(len(cost[0])):
            if i==0 and j==0:
                T[i][j] = cost[i][j]
            elif i == 0:
                T[i][j] = T[i][j-1] + cost[i][j]
            elif j == 0:
                T[i][j] = T[i-1][j] + cost[i][j]
            else:
                T[i][j] = min(T[i-1][j],T[i][j-1]) + cost[i][j]
                
    return T[-1][-1]            
      
cost = [[1, 2, 5], 
        [3, 2, 1]] 
print(minCostPath(cost))     
********************************************************************************************************
def bitonic(nums):
    
    a=lic(nums)
    c=lic(nums[::-1])
    b=c[::-1]
    bitonic=[]
    for i in range(len(nums)):
        bitonic.append(a[i]+b[i]-1)
        
    return max(bitonic)    
    
    
def lic(nums):   
    #seq=[0] * len(nums)
    lis=[1] * len(nums)
    
    if len(nums)<1:
        return 0
    if len(nums) is None:
        return 0
    for i in range(1,len(nums)):
        for j in range(i):
            if nums[j]<nums[i]:
                lis[i] = max(lis[i],lis[j]+1) 
                        
    return lis
    
bitonic([2, -1, 4, 3, 5, -1, 3, 2] )    