class Solution2:
    def combinationSum(self, candidates, target):
        candidates.sort()
        res=[]
        self.DFS(candidates,target,0,res,[])
        return res
 
    def DFS(self,candidates,target,start,res,intermedia):
        if target==0:
            res.append(intermedia)
            return
        for i in range(start,len(candidates)):
            if target<candidates[i]:
                return
            self.DFS(candidates,target-candidates[i],i,res,intermedia+[candidates[i]])
 
test2=Solution2()
print(test2.combinationSum([2,3,6,7],7))
********************************************************************************************************
https://www.youtube.com/watch?v=sz1qaKt0KGQ
def helpler(l, r, item, res):
        if r < l:
            return
        if l == 0 and r == 0:
            res.append(item)
        if l > 0:
            helpler(l - 1, r, item + '(', res)
        if r > 0:
            helpler(l, r - 1, item + ')', res)
    
def generateParenthesis(n):
    if n == 0:
        return []
    res = []
    helpler(n, n, '', res)
    return res
generateParenthesis(3)
*********************************************************************************************************

*********************************************************************************************************

*********************************************************************************************************

*********************************************************************************************************

*********************************************************************************************************
